import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

st.set_page_config(page_title="AI-–∞–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑ —É —Ö–º–∞—Ä—ñ", layout="wide")
st.title("üîê –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑ —É —Ö–º–∞—Ä–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI")

st.header("1Ô∏è‚É£ –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
user_ids = [f'User_{i}' for i in range(1, 11)]
hours = list(range(24))
activity_data = np.random.poisson(lam=5, size=(len(user_ids), len(hours)))
activity_df = pd.DataFrame(activity_data, index=user_ids, columns=hours)

fig, ax = plt.subplots(figsize=(10, 5))
sns.heatmap(activity_df, cmap='YlOrRd', linewidths=0.5, ax=ax)
st.pyplot(fig)

st.header("2Ô∏è‚É£ –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—å–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
summary_df = pd.DataFrame(activity_data.sum(axis=1), index=user_ids, columns=['total_requests'])
summary_df.loc['User_3', 'total_requests'] = 150  # –í—Å—Ç–∞–≤–∫–∞ –∞–Ω–æ–º–∞–ª—ñ—ó

model = IsolationForest(contamination=0.1)
summary_df['anomaly'] = model.fit_predict(summary_df[['total_requests']])
summary_df['anomaly'] = summary_df['anomaly'].map({1: 'Normal', -1: 'Anomaly'})

fig2, ax2 = plt.subplots(figsize=(8, 4))
sns.barplot(data=summary_df.reset_index(), x='index', y='total_requests', hue='anomaly', palette={'Normal': 'green', 'Anomaly': 'red'}, ax=ax2)
ax2.set_ylabel('–ó–∞–ø–∏—Ç—ñ–≤ –∑–∞ –¥–æ–±—É')
ax2.set_xlabel('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
st.pyplot(fig2)

st.header("3Ô∏è‚É£ –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≥—Ä–æ–∑ –∑–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–æ–≤–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏")
st.write("**–û–∑–Ω–∞–∫–∏:** 1 ‚Äî –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, 2 ‚Äî —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –≤–≤—ñ–º–∫–Ω–µ–Ω–µ")
X = [[1, 0], [0, 1], [1, 1], [0, 0], [1, 1], [0, 0], [1, 0], [0, 1]]
y = [1, 1, 1, 0, 1, 0, 0, 1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

example = [st.slider('–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (0/1)', 0, 1, 1),
           st.slider('–®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (0/1)', 0, 1, 1)]
pred = clf.predict([example])[0]

st.success(f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑–∞–≥—Ä–æ–∑–∏: {'–í–∏—Å–æ–∫–∞' if pred == 1 else '–ù–∏–∑—å–∫–∞'}")
